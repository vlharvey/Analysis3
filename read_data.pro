;read_data_cpm.pro

hem='NH'
read,'Is this for NH or SH ?? ',hem
hem=strupcase(hem)

;pth='e:\data\aim\cips\l4_nc\'
pth='e:\cips\v3.13_nh_2008\'
V='3.13'
;READ,'INPUT THE VERSION (3, 3.11) >> ',V
V=STRCOMPRESS(V,/REMOVE_ALL)

day1=120
day2=240

day1=241
day2=245

;pth_out=pth+'idlsave\'


;******** INFORMATION ABOVE THIS LINE MIGHT HAVE TO BE UPDATED FOR DIFFERENT
;******** SEASONS AND DATA VERSIONS

;THIS USES THE CLOUD PRESENCE MAP ARRAY TO CALCULATE
;  FREQUENCIES. AND USES THE CPM=1 VALUE TO GET THE ALBEDOS.

;COPY THE NC FILES OVER FROM HORSEHEAD. ON 2 JULY 2008 THESE WERE IN THE DIRECTORY
; /aim/data/cips/v3.11.
; NOTE THAT TO GET TO THIS DIRECTORY YOU HAVE TO GO UP MANY LEVELS FROM WHERE I BY DEFAULT
; ENTER ONTO HORSEHEAD.
; ON 2 JULY 2008 IT WOULD NOT LET ME COPY OVER THE NH SEASON FROM DAY 144 TO DAY 244 AT
; ONCE, SO I HAD TO COPY OVER ONLY PARTS OF THE SEASON AT A TIME. 100 DAYS REQUIRES ~29 GB.

;WITH VERSION 3.11 THE ORIGINAL LINE TO EXTRACT THE SOLAR ZENITH ANGLE NO LONGER WORKED
; BECAUSE APPARENTLY THE POINTER STRUCTURE HAD BEEN CHANGED.


LIM=1   ;LOWER LIMIT FOR ALBEDO -- ANYTHING SMALLER THAN THIS IS ASSUMED NOT TO BE A CLOUD.
;USING LIM=-99 ESSENTIALLY INCLUDES ALL POINTS THAT ARE FOUND WITH CLOUD_PRESENCE_MAP,
;EVEN IF THE ALBEDO IS NEGATIVE (WHICH DOES HAPPEN) -- BUT THEN THE ALB/ALB_ERR TEST
;MIGHT CATCH IT.
;
ERRLIM=1.0   ;MAXIMUM ALLOWED RATIO OF ALBEDO_ERR/ALBEDO
SZALIM=91    ;DATA WITH SZA > SZALIM ARE BAD (IN NH THIS CAN ONLY HAPPEN ON THE ASCENDING NODE)
SZALIM=180   ;DON'T GET RID OF ANY DATA BASED ON SZA.

;Save out daily files with date, ut, nclouds, nall,
;   latitude, longitude

;LATITUDES FOR SH DATA ARE ALL POSITIVE SO NO NEED TO CHANGE ANYTHING HERE!!!

;TO CHANGE DAYS THAT ARE RUN, YOU MUST CHANGE 3 THINGS:
;   DAY1=XXX
;   OPENR,1,'DIR....
;   FOR I=0,NDAYS-1....

;ALL DATA ARE ON DIFFERENT LAT/LON GRIDS, SO PUT THEM ONTO A COMMON (WACCM 4X5) GRID
NLAT=13 & NLON=72
if hem eq 'NH' then LATGRID=INDGEN(NLAT)*(4.0)+42 ;FOR NH DATA ONLY!!!
if hem eq 'SH' then LATGRID=INDGEN(NLAT)*(-4.0)-42 ;FOR SH DATA ONLY!!!
LONGRID=INDGEN(NLON)*5
LAINCR=2.0
LOINCR=2.5


fname=' '


;find the # orbits on each day
ndays=day2-day1+1
norbits=intarr(ndays)

;read in array of file names
close,1
OPENR,1,'DIR.TXT'
;OPENR,1,'DIR_401.TXT'
   ;OPENR,1,'DIR_PART.TXT'  ;IF WE HAVE TO START PART-WAY THROUGH THE SEASON
   ;OPENR,1,'DIR_244.TXT'   ;FOR A SPECIFIC DAY
   ;OPENR,1,'DIR_182.TXT'
count=0
while not eof(1) do begin
   readf,1,fname
   if count eq 0 then fnames=[fname] else fnames=[fnames,fname]
   count=count+1
endwhile

DDD = STRMID(FNAMES,28,3)   ;EXTRACTS THE DAY NUMBER
;FIND THE # ORBITS ON EACH DAY
FOR D=DAY1,DAY2 DO BEGIN
   I=D-DAY1
   X=WHERE(DDD EQ D OR DDD EQ D-365,NX) ;ONLY WORKS BECAUSE SEASON IS LESS THAN HALF A YEAR.
   NORBITS(I)=NX
ENDFOR
;MAXORBITS=MAX(NORBITS)

;STOP


DATES=LONARR(NDAYS)-99

FCOUNT=-1   ;FILE COUNTER
NFILES=N_ELEMENTS(FNAMES)
FOR I = 0,NDAYS-1 DO BEGIN       ;LOOP OVER DAYS ******
;FOR I = 0,0 DO BEGIN

   ALB_AVG=FLTARR(NLON,NLAT)-99
   ALB_ERR_AVG=FLTARR(NLON,NLAT)-99
   RAD_AVG=FLTARR(NLON,NLAT)-99
   RAD_ERR_AVG=FLTARR(NLON,NLAT)-99
   NCLOUDS=FLTARR(NLON,NLAT)-99
   NPOINTS=FLTARR(NLON,NLAT)-99

   NO=NORBITS(I)
   IF NO EQ 0 THEN GOTO, NEXT_DAY

   ALBS=FLTARR(NLON,NLAT,NO)-99
   ALBS_ERR=FLTARR(NLON,NLAT,NO)-99
   NPTS=FLTARR(NLON,NLAT,NO)-99
   NCLDS=FLTARR(NLON,NLAT,NO)-99
   RADS=ALBS
   RADS_ERR=ALBS_ERR

   FOR J = 0,NO-1 DO BEGIN       ;LOOP OVER ORBITS ******
      FCOUNT=FCOUNT+1
      FNAME=FNAMES(FCOUNT)
      data=read_cips_file(pth+fname,/full_path) ;Must have the path even if in the same directory!
      ;stop
      DAY = DATA.UT_DATE

      ALB = (*data[0].cld_albedo)
      ALB_ERR = (*DATA[0].CLD_ALBEDO_UNC)
      LATITUDE = (*DATA[0].LATITUDE)
      X=WHERE(LATITUDE GT 90,NX)    ;GET RID OF LATITUDES GREATER THAN 90
      IF NX GT 0 THEN LATITUDE(X)=180-LATITUDE(X)
X=WHERE(LATITUDE lt -90.,NX)
if nx gt 0L then latitude(x)=-90.-(latitude(x)+90.)

      ;OLDLAT=(*DATA[0].LATITUDE)    ;WILL USE TO DEFINE ASCENDING VS. DESCENDING
      LONGITUDE = (*DATA[0].LONGITUDE)
      X=WHERE(LONGITUDE LT 0,NX)
      IF NX GT 0 THEN LONGITUDE(X)=LONGITUDE(X)+360
      LAYER = (*DATA[0].NLAYERS)
      UT = (*DATA[0].UT_TIME)
      SZA = (*DATA[0].ZENITH_ANGLE_RAY_PEAK)
      VIEW = (*DATA[0].VIEW_ANGLE_RAY_PEAK)
      CLOUD_INDEX=(*DATA[0].CLOUD_PRESENCE_MAP) ;1 FOR CLOUD, 0 FOR NO CLOUD
      RAD=(*DATA[0].PARTICLE_RADIUS)
      RAD_ERR=(*DATA[0].PARTICLE_RADIUS_UNC)

HEAP_GC

;RESULT=MEMORY(/CURRENT)
;PRINT,'MEMORY IS: ',RESULT
;PRINT,' '

      ;AVERAGE OVER ALL ALBEDOS IN EACH WACCM LON/LAT BIN.
      ;OMIT ANY ALBEDOS THAT ARE SMALLER THAN LIM.
      ;DON'T DO THIS:  ONLY USE THOSE POINTS THAT HAVE AT LEAST 6 LAYERS
      ;DO NOT USE ASCENDING NODE DATA WHERE SZA GT ~91 DEG
      ;OMIT ANY DATA WHERE ALB_ERR/ALB GT ERRLIM.

      ;FIRST GET RID OF ANY INFINITE DATA
      ;   AND ANY DATA ON THE ASCENDING NODE WHERE SZA GT SZA_LIM (SZA IS NEVER
      ;   GT SZA_LIM ON THE DESCENDING NODE).
      BAD=WHERE(FINITE(ALB) EQ 0 OR FINITE(ALB_ERR) EQ 0 OR SZA GT SZALIM,NBAD)
      IF NBAD GT 0 THEN BEGIN
         ALB(BAD)=-99 & ALB_ERR(BAD)=-99
         RAD(BAD)=-99 & RAD_ERR(BAD)=-99
      ENDIF

      FOR LO=0,NLON-1 DO BEGIN
         FOR LA=0,NLAT-1 DO BEGIN
            ;FIND ALL POINTS
            X=WHERE(LATITUDE GT LATGRID(LA)-LAINCR AND LATITUDE LE LATGRID(LA)+LAINCR $
                AND LONGITUDE GT LONGRID(LO)-LOINCR AND LONGITUDE LE LONGRID(LO)+LOINCR $
                AND (CLOUD_INDEX EQ 1 OR CLOUD_INDEX EQ 0),NX)
            IF NX NE 0 THEN BEGIN
               NPTS(LO,LA,J) = NX  ;-99 IF NO VALID POINTS
               ;FIND CLOUDS
               Y=WHERE(CLOUD_INDEX(X) EQ 1 AND $
                       ALB(X) GE LIM AND ALB_ERR(X) NE -99 AND ABS(ALB_ERR(X)/ALB(X)) LE ERRLIM,NY)
               IF NY GT 0 THEN BEGIN
                  ALBS(LO,LA,J) = MEAN(ALB(X(Y)))
                  ALBS_ERR(LO,LA,J) = MEAN(ALB_ERR(X(Y)))
                  RADS(LO,LA,J) = MEAN(RAD(X(Y)))
                  RADS_ERR(LO,LA,J) = MEAN(RAD_ERR(X(Y)))
                  NCLDS(LO,LA,J) = NY
               ENDIF ELSE BEGIN
                  ALBS(LO,LA,J) = -99
                  ALBS_ERR(LO,LA,J) = -99
                  RADS(LO,LA,J) = -99
                  RADS_ERR(LO,LA,J) = -99
                  NCLDS(LO,LA,J) = 0
               ENDELSE
            ENDIF
         ENDFOR
      ENDFOR
      ;STOP
   ENDFOR   ;*** END LOOP OVER ORBITS
   ;DO NEW LOOP OVER LON AND LAT TO GET DAILY AVERAGE POINTS
   ;stop
   FOR LO=0,NLON-1 DO BEGIN
      FOR LA=0,NLAT-1 DO BEGIN
         X=WHERE(NCLDS(LO,LA,*) GT 0,NX)
         IF NX GT 0 THEN BEGIN
            ALB_AVG(LO,LA)=MEAN(ALBS(LO,LA,X))
            ALB_ERR_AVG(LO,LA) = MEAN(ALBS_ERR(LO,LA,X))
            RAD_AVG(LO,LA)=MEAN(RADS(LO,LA,X))
            RAD_ERR_AVG(LO,LA) = MEAN(RADS_ERR(LO,LA,X))
         ENDIF
         ;SO ALB_AVG AND ALB_ERR ONLY CORRESPOND TO CLOUD POINTS; OTHERWISE THEY ARE -99.
         X=WHERE(NCLDS(LO,LA,*) NE -99,NX)
         IF NX GT 0 THEN NCLOUDS(LO,LA)=TOTAL(NCLDS(LO,LA,X))
         X=WHERE(NPTS(LO,LA,*) NE -99,NX)
         IF NX GT 0 THEN NPOINTS(LO,LA)=TOTAL(NPTS(LO,LA,X))
      ENDFOR
   ENDFOR

;STOP

   DT=YYYYDDD_TO_YYYYMMDD(DAY)
   STRDT=STRCOMPRESS(DT,/REMOVE_ALL)

   albedo=alb_avg & albedo_err=alb_err_AVG
   RADIUS=RAD_AVG & RADIUS_ERR=RAD_ERR_AVG

   X=WHERE(NPOINTS LT NCLOUDS,NX)
   IF NX GT 0 THEN STOP

;STOP

   fout=pth+'idlsave\'+strdt+'.dat'
   SAVE,LATGRID,LONGRID,ALBEDO,ALBEDO_ERR,NCLOUDS,NPOINTS,RADIUS,RADIUS_ERR,DT,file=fout

   ;IF MAX(NCLOUDS) NE 0 THEN stop

NEXT_DAY:

ENDFOR  ;***** END LOOP OVER DAYS


      ;VERSION = DATA.VERSION
      ;VERSION1B = DATA.DEPENDANT1BVERSION
      ;ORBIT_START_UT = DATA.ORBIT_START_TIME_UT
      ;FREQ = DATA.PERCENT_CLOUDS
      ;NLAYERS=(*DATA[0].NLAYERS)
      ;UT = (*DATA[0].UT_TIME)
      ;PHASE_ALBEDO = (*DATA[0].CLD_PHASE_ALBEDO)
      ;PHASE_ALBEDO_ERR=(*DATA[0].CLD_PHASE_ALBEDO_UNC)
      ;VIEW = (*DATA[0].VIEWING_ANGLE)
      ;SZA = (*DATA[0].ZENITH_ANGLE)
      ;SCA = (*DATA[0].SCATTERING_ANGLE)
      ;C = (*DATA[0].OZONE_COL_DENSITY)
      ;C_ERR = (*DATA[0].OZONE_COL_DENSITY_UNC)
      ;SIGMA = (*DATA[0].SCALE_HEIGHT_RATIO)
      ;SIGMA_ERR = (*DATA[0].SCALE_HEIGHT_RATIO_UNC)
      ;R = (*DATA[0].PARTICLE_RADIUS)
      ;R_ERR = (*DATA[0].PARTICLE_RADIUS_UNC)


;SAVE,LATITUDE,LONGITUDE,DATE,SZA,UT,ALB,INDEX,ORBIT

;albedo, orbit, date, ut, index, latitude, longitude, sza
end
